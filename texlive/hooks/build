#!/bin/bash
# Build hooks docs:
# https://docs.docker.com/docker-cloud/builds/advanced/#override-build-test-or-push-commands
# $LOCAL_DOCKER is "true" if you run this file via texlive/localbuild.sh
if [ -z $LOCAL_DOCKER ]; then
  echo "NOT BUILDING LOCAL DOCKER"
else
  echo "BUILDING DOCKER LOCALLY. ONLY BUILDING BASIC SCHEME BY DEFAULT."
fi
echo "Now in `pwd`"
echo "Building"
echo "Path: $DOCKERFILE_PATH"
# echo "Image: $IMAGE_NAME"
echo ""


# repo_2018=""

build_scheme(){
  scheme_name="$1"
  tl_version="$2"
  tar_install_url="$3"
  ctan_repo="$4"
  IMAGE_NAME="$DOCKER_REPO:tl-$scheme_name"
  if [ ! -z "$tl_version" ]; then
    IMAGE_NAME="$IMAGE_NAME-$tl_version"
  fi
  export IMAGE_NAME;
  echo "Building actual $scheme_name ($IMAGE_NAME)"
  docker build \
    --build-arg scheme="$scheme_name" \
    --build-arg tl_version="$2" \
    --build-arg installfile="$tar_install_url" \
    --build-arg ctan_repo="$ctan_repo" \
    -t "$IMAGE_NAME" -f "$DOCKERFILE_PATH" .

  if [ -z "$LOCAL_DOCKER" ]; then
    # We're on the docker hub, so let's push the tags as well
    echo "Pushing $scheme_name ($IMAGE_NAME)"
    docker push $IMAGE_NAME
  fi
}
add_tag(){
  existing_tag="$1"
  new_tag="$2"
  docker tag "$DOCKER_REPO:$existing_tag" "$DOCKER_REPO:$new_tag"
  if [ -z "$LOCAL_DOCKER" ]; then
    # We're on the docker hub, so let's push the tags as well
    echo "Pushing updated $DOCKER_REPO:$existing_tag with new tag $DOCKER_REPO:$new_tag"
    docker push "$DOCKER_REPO:$existing_tag"
  fi
}
_set_latest(){
  target_suffix="$1"
  scheme_name="$2"
  add_tag "tl-$scheme_name-$target_suffix" "tl-$scheme_name"
  add_tag "tl-$scheme_name-$target_suffix" "tl-$scheme_name-latest"
}
set_latest(){
  target_suffix="$1"
  _set_latest "$target_suffix" "basic"
  if [ -z "$LOCAL_DOCKER" ]; then
    # We're on the docker hub, so let's build medium and full too
  _set_latest "$target_suffix" "small"
  _set_latest "$target_suffix" "medium"
  # _set_latest "$target_suffix" "full"
  fi
}
build_schemes(){
  tl_version="$1"
  tar_file="$2"
  repo="$3"
  if [ -z "$LOCAL_DOCKER" ]; then
    build_scheme "basic" "$tl_version" "$tar_file" "$repo"
    build_scheme "small" "$tl_version" "$tar_file" "$repo"
    build_scheme "medium" "$tl_version" "$tar_file" "$repo"
    # build_scheme "full" "$tl_version" "$tar_file" "$repo"
  else
    build_scheme "basic" "$tl_version" "$tar_file" "$repo"
    # build_scheme "small" "$tl_version" "$tar_file" "$repo"
    # build_scheme "minimal" "$tl_version" "$tar_file" "$repo"
  fi
}
# Remember to update repovars.env too
legacy_url(){
  echo "http://ftp.math.utah.edu/pub/tex/historic/systems/texlive/$1/tlnet-final/install-tl-unx.tar.gz"
}
legacy_repo(){
  echo "http://ftp.math.utah.edu/pub/tex/historic/systems/texlive/$1/tlnet-final/"
}
build_legacies(){
  # Tells docker to rebuild these frozen TeXLive versions.
  tar_2018=`legacy_url "2018"`
  repo_2018=`legacy_repo "2018"`
  build_schemes "2018" "$tar_2018" "$repo_2018"
}

tar_2019="http://ftp.math.utah.edu/pub/tex/historic/systems/texlive/2019/install-tl-unx.tar.gz"
repo_2019="https://ctan.crest.fr/tex-archive/systems/texlive/tlnet/"
build_schemes "2019" "$tar_2019" "$repo_2019"
set_latest "2019"
